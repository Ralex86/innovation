{"version":3,"sources":["assets/help.svg","containers/SliderApi.js","components/Paging.js","components/Slider.js","components/Message.js","components/Monitoring.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SliderApi","state","isSuccess","isFetching","isFailure","sliders","_this2","this","fetch","then","res","json","data","setState","_this$state","props","children","React","Component","Paging","_this$props","currentIndex","nSlides","react_default","a","createElement","RootStyled","concat","styled","div","_templateObject","Slider","renderSlides","slides","slideWidth","length","map","slide","index","react","Slide","key","toString","renderPaging","components_Paging","Slider_RootStyled","Scene","sliderWidth","Slider_templateObject","_templateObject2","x","y","_templateObject3","colors","Message","message","questions","isOpen","handleInput","e","_this","target","value","handleSendMessage","sendMessage","prevState","Object","toConsumableArray","handleKeyPress","event","renderHeader","Header","onClick","Infos","Icon","Message_QuestionIcon","renderMain","Main","Questions","question","Question","renderFooter","Footer","Container","Input","placeholder","onChange","onKeyPress","SendButton","NChar","Message_RootStyled","Message_templateObject","Message_templateObject2","input","Message_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","QuestionIcon","alt","src","questionMark","width","height","style","color","_templateObject11","_templateObject12","Monitoring","_this$props$infos","infos","alpha","beta","gamma","Monitoring_RootStyled","toFixed","Monitoring_templateObject","App","windowHeight","window","innerHeight","windowWidth","innerWidth","hasWindowResized","screenWidth","screenHeight","slideIndex","isPointerDisplayed","screenRef","createRef","endpoint","socket","socketIOClient","updateScreenDimensions","_this$screenRef$curre","current","clientHeight","clientWidth","updateWindowDimensions","renderSlider","slidesWithoutQuestions","App_Slide","slideBackground","questionsSlides","slidesWithQuestions","components_Slider","renderScreen","i_x","i_y","Screen","ref","Cursor","Aim","containers_SliderApi","renderMessage","components_Message","console","log","emit","renderMonitoring","components_Monitoring","addEventListener","on","display","removeEventListener","App_RootStyled","App_templateObject","App_templateObject2","App_templateObject3","App_templateObject4","App_templateObject5","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8dbfcc3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/help.71578607.svg\";","// @flow\nimport React from 'react';\n\nexport type SliderType = {\n  id: string,\n  url: string,\n};\n\ntype State = {\n  isSuccess: boolean,\n  isFetching: boolean,\n  isFailure: boolean,\n  sliders: ?Array<SliderType>,\n};\n\ntype Props = {\n  children: Function,\n};\n\nclass SliderApi extends React.Component<Props, State> {\n  state = {\n    isSuccess: true,\n    isFetching: true,\n    isFailure: false,\n    sliders: null,\n  };\n\n  componentDidMount() {\n    fetch('/slides')\n      .then(res => res.json())\n      .then(data => {\n        this.setState({isFetching: false, sliders: data});\n      });\n  }\n\n  render() {\n    const {isSuccess, isFetching, isFailure, sliders} = this.state;\n    if (isFetching) return null;\n    if (isFailure) return null;\n\n    return isSuccess && this.props.children(sliders);\n  }\n}\n\nexport default SliderApi;\n","// @flow\n\nimport React from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  nSlides: number,\n  currentIndex: number,\n};\n\nclass Paging extends React.Component<Props> {\n  render() {\n    const {currentIndex, nSlides} = this.props;\n    return <RootStyled>{`${currentIndex + 1} / ${nSlides}`}</RootStyled>;\n  }\n}\n\nconst RootStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  position: absolute;\n  top: 50px;\n  right: 50px;\n  width: 100px;\n  text-align:center;\n\n  padding: 4px;\n\n  color: white;\n  background: rgba(0, 0, 0, 0.6);\n  font-size: small;\n`;\n\nexport default Paging;\n","// @flow\n\nimport * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Paging from './Paging';\n\ntype ReactElement = React.Element;\n\ntype Props = {\n  slides: Array<ReactElement>,\n  index: number,\n};\n\nclass Slider extends React.Component<Props> {\n  renderSlides = (slides: Array<ReactElement>) => {\n    const slideWidth = 100 / slides.length;\n    return slides.map((slide, index) => (\n      <Slide slideWidth={slideWidth} key={index.toString()}>\n        {slide}\n      </Slide>\n    ));\n  };\n\n  renderPaging = (currentIndex, nSlides) => (\n    <Paging currentIndex={currentIndex} nSlides={nSlides} />\n  );\n\n  render() {\n    const {slides, index} = this.props;\n    const nSlides = slides.length;\n    return (\n      <RootStyled>\n        <Scene index={index} sliderWidth={nSlides * 100}>\n          {this.renderSlides(slides)}\n        </Scene>\n        {this.renderPaging(index, nSlides)}\n      </RootStyled>\n    );\n  }\n}\n\nconst Slide = styled.div`\n  height: 100%;\n  width: ${props => props.slideWidth}%;\n  margin: 4px;\n`;\n\nconst Scene = styled.div`\n\tposition: relative;\n\tleft: ${props => -props.index * 100}%;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n  width: ${props => props.sliderWidth}%;\n\theight: 100%;\n\n\ttransition: left 0.5s ease-in-out;\n  // transform: ${props => `translate3d(${props.x}px,${props.y}px,0)`};\n`;\n\nconst RootStyled = styled.div`\n  position: relative;\n  z-index: 0;\n\n  height: 100%;\n  width: 100%;\n  paddin-top: 75%;\n`;\n\nexport default Slider;\n","// @flow\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport questionMark from '../assets/help.svg';\n\nconst colors = {\n  green: 'rgb( 3, 178, 141 )',\n  gray: 'rgb( 90, 90, 90 )',\n  white: 'white',\n};\n\ntype Props = {\n  sendMessage: (message: string) => void,\n};\n\ntype State = {\n  message: string,\n  questions: Array<string>,\n  isOpen: boolean,\n};\n\nclass Message extends React.Component<Props, State> {\n  state = {\n    message: '',\n    questions: [],\n    isOpen: false,\n  };\n\n  handleInput = e => {\n    this.setState({\n      message: e.target.value,\n    });\n  };\n\n  handleSendMessage = (message: string) => {\n    this.props.sendMessage(message);\n    this.setState(\n      prevState => ({\n        questions: [...prevState.questions, message],\n      }),\n      () => this.setState({message: ''}),\n    );\n  };\n\n  handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      this.handleSendMessage(this.state.message);\n    }\n  };\n\n  renderHeader = () => {\n    const infos = `Poser une question`;\n    return (\n      <Header\n        onClick={() =>\n          this.setState(prevState => ({isOpen: !prevState.isOpen}))\n        }>\n        <Infos>{infos}</Infos>\n        <Icon>\n          <QuestionIcon />\n        </Icon>\n      </Header>\n    );\n  };\n\n  renderMain = (questions: Array<string>) => {\n    return (\n      <Main>\n        <Questions>\n          {questions.map((question, index) => (\n            <Question key={index.toString()}>{question}</Question>\n          ))}\n        </Questions>\n      </Main>\n    );\n  };\n\n  renderFooter = (message: string) => {\n    return (\n      <Footer>\n        <Container>\n          <Input\n            value={message}\n            placeholder={'Posez moi une question'}\n            onChange={this.handleInput}\n            onKeyPress={this.handleKeyPress}\n          />\n          <SendButton onClick={() => this.handleSendMessage(message)} />\n        </Container>\n        <NChar>{`${message.length} caractères`}</NChar>\n      </Footer>\n    );\n  };\n\n  render() {\n    const {message, questions, isOpen} = this.state;\n    return (\n      <RootStyled isOpen={isOpen}>\n        {this.renderHeader()}\n        {this.renderMain(questions)}\n        {this.renderFooter(message)}\n      </RootStyled>\n    );\n  }\n}\n\nconst Questions = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 8px;\n`;\n\nconst Question = styled.div``;\n\nconst Input = styled.input`\n  flex: 1;\n  margin-right: 8px;\n  padding: 8px;\n`;\n\nconst Infos = styled.div`\n  color: ${colors.white};\n  padding: 8px;\n  // margin: 8px;\n`;\n\nconst SendButton = styled.div`\n  width: 36px;\n  height: 36px;\n  border-radius: 8px;\n  background: ${colors.green};\n  cursor: pointer;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  padding: 8px;\n`;\n\nconst NChar = styled.div`\n  padding: 8px;\n`;\n\nconst HEADER_HEIGHT = 50;\n\nconst Header = styled.div`\n  display: flex;\n  align-items: center;\n\n  position: relative;\n  height: ${HEADER_HEIGHT}px;\n  border-top-left-radius: 8px;\n  border-top-right-radius: 8px;\n  background: ${colors.green};\n\n  cursor: pointer;\n`;\n\nconst Main = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  background: rgba(250, 250, 250, 0.8);\n`;\n\nconst Footer = styled.div`\n  height: 90px;\n  background: rgba(250, 250, 250, 0.8);\n`;\n\nconst QuestionIcon = props => (\n  <img\n    alt=\"question\"\n    src={questionMark}\n    width=\"40\"\n    height=\"40\"\n    style={{color: 'white'}}\n  />\n);\n\nconst Icon = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  position: absolute;\n  top: -30px;\n  right: 18px;\n  z-index: 999;\n\n  width: 60px;\n  height: 60px;\n\n  background: ${colors.green};\n\n  border-radius: 100%;\n  user-select: none;\n`;\n\nconst MESSAGE_HEIGHT = 300;\n\nconst RootStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  position: absolute;\n  z-index: 999;\n  bottom: ${props => (props.isOpen ? 0 : -(MESSAGE_HEIGHT - HEADER_HEIGHT))}px;\n  right: 0;\n\n  width: 300px;\n  height: ${MESSAGE_HEIGHT}px;\n\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n  transition: bottom 0.35s ease-in-out;\n`;\n\nexport default Message;\n","// @flow\n\nimport React from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  infos: {\n    alpha: number,\n    beta: number,\n    gamma: number,\n    x: number,\n    y: number,\n  },\n};\n\nclass Monitoring extends React.Component<Props> {\n  render() {\n    const {alpha, beta, gamma, x, y} = this.props.infos;\n    return (\n      <RootStyled>\n        <span>alpha: {alpha}</span>\n        <span>beta: {beta}</span>\n        <span>gamma: {gamma}</span>\n        <span>x: {x.toFixed(2)}</span>\n        <span>y: {y.toFixed(2)}</span>\n      </RootStyled>\n    );\n  }\n}\n\nconst RootStyled = styled.div`\n  position: absolute;\n  bottom: 10px;\n  left: 10px;\n  display: flex;\n  flex-direction: column;\n  width: 84px;\n  padding: 4px;\n  right: 10px;\n  width: 100px;\n  color: white;\n  background: rgba(0, 0, 0, 0.6);\n  font-size: small;\n`;\n\nexport default Monitoring;\n","import React from 'react';\nimport './App.css';\nimport styled from '@emotion/styled';\nimport socketIOClient from 'socket.io-client';\n\nimport SliderApi from './containers/SliderApi';\nimport Slider from './components/Slider';\nimport Message from './components/Message';\nimport Monitoring from './components/Monitoring';\n\nclass App extends React.Component {\n  state = {\n    alpha: null,\n    beta: null,\n    gamma: null,\n    x: 20,\n    y: 20,\n    windowHeight: window.innerHeight,\n    windowWidth: window.innerWidth,\n    hasWindowResized: false,\n    screenWidth: 0,\n    screenHeight: 0,\n    slideIndex: 0,\n    isPointerDisplayed: false,\n    questions: [],\n  };\n\n  screenRef = React.createRef();\n  endpoint = '/screen';\n  socket = socketIOClient(this.endpoint);\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n\n    this.socket.on('position', data => {\n      const {alpha, beta, gamma, x, y} = data;\n      this.setState({alpha, beta, gamma, x, y});\n    });\n\n    this.socket.on('questions', data => {\n      console.log(data);\n      this.setState({questions: data});\n    });\n\n    this.socket.on('slideIndex', data => {\n      this.setState({slideIndex: data});\n    });\n\n    this.socket.on('display', data => {\n      this.setState({ isPointerDisplayed: data.display });\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateScreenDimensions = () => {\n    const {\n      current: {clientHeight, clientWidth},\n    } = this.screenRef;\n\n    this.setState({\n      screenWidth: clientWidth,\n      screenHeight: clientHeight,\n    });\n  };\n\n  updateWindowDimensions = () => {\n    this.setState(\n      {\n        windowHeight: window.innerHeight,\n        windowWidth: window.innerWidth,\n      },\n      () => this.updateScreenDimensions(),\n    );\n  };\n\n  renderSlider = (slides, slideIndex, questions) => {\n    const slidesWithoutQuestions = slides.map(slide => (\n      <Slide key={slide} slideBackground={slide} />\n    ));\n    const questionsSlides = questions.map(question => (\n      <Slide key={question.message}>\n        <span>{question.message}</span>\n      </Slide>\n    ));\n    const slidesWithQuestions = [...slidesWithoutQuestions, ...questionsSlides];\n    return <Slider index={slideIndex} slides={slidesWithQuestions} />;\n  };\n\n  renderScreen = (slideIndex, i_x, i_y, questions, isPointerDisplayed) => {\n    return (\n      <Screen ref={this.screenRef}>\n        {isPointerDisplayed && (\n          <Cursor x={i_x} y={i_y}>\n            <Aim />\n          </Cursor>\n        )}\n        <SliderApi>\n          {slides => this.renderSlider(slides, slideIndex, questions)}\n        </SliderApi>\n      </Screen>\n    );\n  };\n\n  renderMessage = () => (\n    <Message\n      sendMessage={message => {\n        console.log(message);\n        this.socket.emit('message', {message: message});\n      }}\n    />\n  );\n\n  renderMonitoring = (alpha, beta, gamma, x, y) => {\n    return <Monitoring infos={{alpha, beta, gamma, x, y}}/>;\n  };\n\n  render() {\n    const {\n      alpha,\n      beta,\n      gamma,\n      x,\n      y,\n      screenWidth,\n      screenHeight,\n      slideIndex,\n      isPointerDisplayed,\n      questions,\n    } = this.state;\n    const i_x = (screenWidth * x) / 200 + screenWidth / 2;\n    const i_y = (screenHeight * y) / 200 + screenHeight / 2;\n\n    return (\n      <RootStyled>\n        {this.renderScreen(slideIndex, i_x, i_y, questions, isPointerDisplayed)}\n        {this.renderMonitoring(alpha, beta, gamma, x, y)}\n        {this.renderMessage()}\n      </RootStyled>\n    );\n  }\n}\n\nconst Slide = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  background-size: cover;\n  background-image: url(${props => props.slideBackground});\n  border-radius: 15px;\n  border: 1px solid #9999ff;\n  box-shadow: 2px 5px 5px #ccccff;\n`;\n\nconst Cursor = styled.div`\n  position: absolute;\n  z-index: 999;\n  top: 0;\n  left: 0;\n  width: 25px;\n  height: 25px;\n  background: black;\n  border-radius: 100%;\n  user-select: none;\n  transform: ${props => `translate3d(${props.x}px,${props.y}px,0)`};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst Aim = styled.div`\n  position: relative;\n  width: 15px;\n  height: 15px;\n  margin: 0 auto;\n  border-radius: 100%;\n  background: #9999ff;\n`;\n\nconst Screen = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  position: relative;\n  width: calc(100% - 80px);\n  height: calc(100% - 80px);\n\n  border-radius: 8px;\n  box-sizing: border-box;\n`;\n\nconst RootStyled = styled.div`\n  position: relative;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}